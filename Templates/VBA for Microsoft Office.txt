[Options]
Description=VBA for Microsoft Office
Language=VBA
SaveAsExtension=.cls
SaveAsFileTypes=VBA Class File (*.cls)|*.cls|All Files (*.*)|*.*

[Template1]
{Rem}
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
_/  MASH- VBA Script Template (Single Character)
_/  Copyright 1998-2004 by BellCraft Technologies
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
{/Rem}
#COPYRIGHT
'
' TODO:  Set a "Reference" in the Visual Basic Editor to
'        Microsoft Agent 2.0 Control (Tools > References...)
'        Please see MASH Online Help for further instructions.

Option Explicit

{ScreenPos}
Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
{/ScreenPos}
{ShellEx}
Private Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hWnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long

{/ShellEx}
' * Agent Control
Public WithEvents AgentControl As Agent

' * Character Objects
#DIM_CHAR_OBJS

Private UsedChars As String

Private %CharID%ID As String
Private %CharID%ACS As String
Private %CharID%Loaded As Boolean
Private HideReq As IAgentCtlRequest
Private Req As IAgentCtlRequest
#DIM_CHAR_XY

Public Function AgentMain()
    On Error Resume Next

    ' * Initialize
    UsedChars = #USED_CHARS

#CHAR_INIT

    Set AgentControl = New Agent
    AgentControl.Connected = True

    %CharID%Loaded = LoadLocalChar(%CharID%ID, %CharID%ACS)

    If Not %CharID%Loaded Then
    	' Attempt to load default character
    	%CharID%Loaded = LoadLocalChar(%CharID%ID, "")
    End If

    If %CharID%Loaded Then
        Call SetCharObj
    End If

    If %CharID%Loaded Then
        Call AgentIntro
    Else
        MsgBox "This Visual Basic program requires the" & vbCrLf & "Microsoft Agent Characters:" & vbCrLf & UsedChars, vbExclamation
    End If
End Function

Private Function LoadLocalChar(ByVal pstrCharID As String, ByVal pstrCharACS As String) As Boolean
    ' Purpose:  Attempt to load the specified character
    ' Returns:  True if successful, False if not
    On Error Resume Next

    If pstrCharACS = "" Then
    	AgentControl.Characters.Load pstrCharID
    Else
    	AgentControl.Characters.Load pstrCharID, pstrCharACS
	End If

    If Err = 0 Then
        LoadLocalChar = True
        Exit Function
    End If
    LoadLocalChar = False
End Function

Private Sub SetCharObj()
    On Error Resume Next

#INIT_CHAR
End Sub

Private Sub AgentControl_DblClick(ByVal CharacterID As String, ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Integer, ByVal Y As Integer)
    ' Stop all characters on double-click
    On Error Resume Next

    %CharID%.StopAll
    If Not %CharID%.HasOtherClients Then
        Set HideReq = %CharID%.Hide
    End If
End Sub

{ScreenPos}
Private Sub GetScreenPositions()
    Dim ScreenWidth As Long
    Dim ScreenHeight As Long

    ScreenWidth = GetSystemMetrics(0)
    ScreenHeight = GetSystemMetrics(1)

#INIT_CHAR_POS
End Sub

{/ScreenPos}
{GetDay}
Private Function GetDay()
    GetDay = Format(Date, "dddd")
End Function

{/GetDay}
{GetDate}
Private Function GetDate() As String
    Dim strDate As String
    Dim strDay As String

    strDate = Format(Date, "mmmm")
    strDay = Day(Date)

    Select Case strDay
    Case "11", "12", "13"
        strDay = strDay & "th"
    Case Else
        Select Case Right(strDay, 1)
        Case "1": strDay = strDay & "st"
        Case "2": strDay = strDay & "nd"
        Case "3": strDay = strDay & "rd"
        Case Else
            strDay = strDay & "th"
        End Select
    End Select

    GetDate = strDate & " " & strDay & ", " & Year(Date)
End Function

{/GetDate}
{GetTime}
Private Function GetTime() As String
    GetTime = Format(Time(), "h:nn AM/PM")
End Function

{/GetTime}
{GetTimeOfDay}
Private Function GetTimeOfDay() As String
    Select Case Hour(Time())
    Case Is < 12
        GetTimeOfDay = "Morning"
    Case Is < 17
        GetTimeOfDay = "Afternoon"
    Case Else
        GetTimeOfDay = "Evening"
    End Select
End Function

{/GetTimeOfDay}
{Commands}
#INIT_COMMANDS

{/Commands}
{ShellEx}
Private Function ShellEx(ByVal pstrDoc As String) As Long
    On Error GoTo ShellEx_Err

    Dim varParams As Variant
    Dim intQ2Pos As Integer

    pstrDoc = Trim(pstrDoc)
    varParams = vbNullString

    On Error Resume Next
    ' Try the easy way first
    Shell pstrDoc, vbNormalFocus

    If Err Then
        On Error GoTo ShellEx_Err
        If Left(pstrDoc, 1) = Chr(34) Then
            ' Program name is quoted and parameters follow
            intQ2Pos = InStr(Mid(pstrDoc, 2), Chr(34))

            If intQ2Pos > 1 Then
                varParams = Trim(Mid(pstrDoc, intQ2Pos + 2))
                pstrDoc = Trim(Mid(pstrDoc, 2, intQ2Pos - 1))
            End If
        ElseIf InStr(pstrDoc, " ") > 0 Then
            ' Assume parameters follow first space, like Start/Run does
            varParams = Trim(Mid(pstrDoc, InStr(pstrDoc, " ") + 1))
            pstrDoc = Trim(Left(pstrDoc, InStr(pstrDoc, " ") - 1))
        End If

        ShellEx = ShellExecute(0&, vbNullString, pstrDoc, varParams, vbNullString, vbNormalFocus)
    End If
    DoEvents
Exit Function

ShellEx_Err:
    MsgBox "Error opening:" & vbCrLf & pstrDoc & vbCrLf & vbCrLf & "Error " & Err.Number & " : " & Err.Description, vbExclamation
    Exit Function
End Function

{/ShellEx}
Private Sub AgentControl_Command(ByVal UserInput As Object)
    On Error Resume Next

{Commands}
    Const BadConfidence = 10

    If (UserInput.Confidence <= -40) Then
        ' Bad Recognition
        Exit Sub
    ElseIf (UserInput.Alt1Name <> "") And Abs(Abs(UserInput.Alt1Confidence) - Abs(UserInput.Confidence)) < BadConfidence Then
        ' Bad Confidence - too close to another command
        Exit Sub
    ElseIf (UserInput.Alt2Name <> "") And Abs(Abs(UserInput.Alt2Confidence) - Abs(UserInput.Confidence)) < BadConfidence Then
        ' Bad Confidence - too close to another command
        Exit Sub
    Else ' High Confidence
        ' *** BEGIN MASH USER COMMANDS ***
#COMMAND_SCRIPT
        ' *** END MASH USER COMMANDS ***
    End If
{/Commands}
End Sub

Private Sub AgentControl_Bookmark(ByVal BookmarkID As Long)
    On Error Resume Next

{Bookmarks}
    ' *** BEGIN MASH USER BOOKMARKS ***
#BOOKMARK_SCRIPT
    ' *** END MASH USER BOOKMARKS ***
{/Bookmarks}
End Sub

Private Sub AgentIntro()
    On Error Resume Next

{ScreenPos}
    GetScreenPositions
{/ScreenPos}
{Commands}
    InitAgentCommands
{/Commands}

    ' *** BEGIN MASH USER SCRIPT ***

#MAIN_SCRIPT

    ' *** END MASH USER SCRIPT ***
End Sub
'_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/

[Template2]
{Rem}
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
_/  MASH- VBA Script Template (Multiple Characters)
_/  Copyright 1998-2004 by BellCraft Technologies
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
{/Rem}
#COPYRIGHT
'
' TODO:  You must set a "Reference" in the Visual Basic Editor to
'        Microsoft Agent 2.0 Control (Tools > References...)
'        Please see MASH Online Help for further instructions.

Option Explicit

{ScreenPos}
Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
{/ScreenPos}
{ShellEx}
Private Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hWnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long

{/ShellEx}
' * Agent Control
Public WithEvents AgentControl As Agent

' * Character Objects
#DIM_CHAR_OBJS

Private CharCount As Integer
Private UsedChars As String

Private CharID(#CHAR_COUNT) As String
Private CharACS(#CHAR_COUNT) As String
Private Loaded(#CHAR_COUNT) As Boolean
Private HideReq(#CHAR_COUNT) As IAgentCtlRequest
Private Req As IAgentCtlRequest
#DIM_CHAR_XY

Public Function AgentMain()
    On Error Resume Next

    Dim fAllLoaded As Boolean
    Dim i As Integer

    ' * Initialize
    CharCount = #CHAR_COUNT
    UsedChars = #USED_CHARS

#CHAR_INIT

    Set AgentControl = New Agent
    AgentControl.Connected = True

    For i = 1 To CharCount
        Loaded(i) = LoadLocalChar(CharID(i), CharACS(i))

        If Loaded(i) Then
            Call SetCharObj(i)
        End If
    Next

    fAllLoaded = True
    For i = 1 To CharCount
       fAllLoaded = fAllLoaded And Loaded(i)
    Next

    If fAllLoaded Then
        Call AgentIntro
    Else
        MsgBox "This Visual Basic program requires the" & vbCrLf & "Microsoft Agent Characters:" & vbCrLf & UsedChars, vbExclamation
    End If
End Function

Private Function LoadLocalChar(ByVal pstrCharID As String, ByVal pstrCharACS As String) As Boolean
    ' Purpose:  Attempt to load the specified character
    ' Returns:  True if successful, False if not
    On Error Resume Next

    AgentControl.Characters.Load pstrCharID, pstrCharACS

    If Err = 0 Then
        LoadLocalChar = True
        Exit Function
    End If
    LoadLocalChar = False
End Function

Private Sub SetCharObj(ByVal i As Integer)
    On Error Resume Next

#INIT_CHAR
End Sub

Private Sub WaitFor(ByVal Req As IAgentCtlRequest)
    On Error Resume Next
    Dim i As Integer

    For i = 1 To CharCount
        AgentControl.Characters(CharID(i)).Wait Req
    Next
End Sub

{ScreenPos}
Private Sub GetScreenPositions()
    Dim ScreenWidth As Long
    Dim ScreenHeight As Long

    ScreenWidth = GetSystemMetrics(0)
    ScreenHeight = GetSystemMetrics(1)

#INIT_CHAR_POS
End Sub

{/ScreenPos}
{GetDay}
Private Function GetDay()
    GetDay = Format(Date, "dddd")
End Function

{/GetDay}
{GetDate}
Private Function GetDate() As String
    Dim strDate As String
    Dim strDay As String

    strDate = Format(Date, "mmmm")
    strDay = Day(Date)

    Select Case strDay
    Case "11", "12", "13"
        strDay = strDay & "th"
    Case Else
        Select Case Right(strDay, 1)
        Case "1": strDay = strDay & "st"
        Case "2": strDay = strDay & "nd"
        Case "3": strDay = strDay & "rd"
        Case Else
            strDay = strDay & "th"
        End Select
    End Select

    GetDate = strDate & " " & strDay & ", " & Year(Date)
End Function

{/GetDate}
{GetTime}
Private Function GetTime() As String
    GetTime = Format(Time(), "h:nn AM/PM")
End Function

{/GetTime}
{GetTimeOfDay}
Private Function GetTimeOfDay() As String
    Select Case Hour(Time())
    Case Is < 12
        GetTimeOfDay = "Morning"
    Case Is < 17
        GetTimeOfDay = "Afternoon"
    Case Else
        GetTimeOfDay = "Evening"
    End Select
End Function

{/GetTimeOfDay}
{Commands}
#INIT_COMMANDS

{/Commands}
{ShellEx}
Private Function ShellEx(ByVal pstrDoc As String) As Long
    On Error GoTo ShellEx_Err

    Dim varParams As Variant
    Dim intQ2Pos As Integer

    pstrDoc = Trim(pstrDoc)
    varParams = vbNullString

    On Error Resume Next
    ' Try the easy way first
    Shell pstrDoc, vbNormalFocus

    If Err Then
        On Error GoTo ShellEx_Err
        If Left(pstrDoc, 1) = Chr(34) Then
            ' Program name is quoted and parameters follow
            intQ2Pos = InStr(Mid(pstrDoc, 2), Chr(34))

            If intQ2Pos > 1 Then
                varParams = Trim(Mid(pstrDoc, intQ2Pos + 2))
                pstrDoc = Trim(Mid(pstrDoc, 2, intQ2Pos - 1))
            End If
        ElseIf InStr(pstrDoc, " ") > 0 Then
            ' Assume parameters follow first space, like Start/Run does
            varParams = Trim(Mid(pstrDoc, InStr(pstrDoc, " ") + 1))
            pstrDoc = Trim(Left(pstrDoc, InStr(pstrDoc, " ") - 1))
        End If

        ShellEx = ShellExecute(0&, vbNullString, pstrDoc, varParams, vbNullString, vbNormalFocus)
    End If
    DoEvents
Exit Function

ShellEx_Err:
    MsgBox "Error opening:" & vbCrLf & pstrDoc & vbCrLf & vbCrLf & "Error " & Err.Number & " : " & Err.Description, vbExclamation
    Exit Function
End Function

{/ShellEx}
Private Sub AgentControl_DblClick(ByVal CharacterID As String, ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Integer, ByVal Y As Integer)
    ' Stop all characters on double-click
    On Error Resume Next
    Dim i As Integer

    For i = 1 To CharCount
        AgentControl.Characters(CharID(i)).StopAll
        If Not AgentControl.Characters(CharID(i)).HasOtherClients Then
            Set HideReq(i) = AgentControl.Characters(CharID(i)).Hide()
        End If
    Next
End Sub

Private Sub AgentControl_RequestComplete(ByVal Request As Object)
    On Error Resume Next

    Dim i As Integer

    For i = 1 To CharCount
        If Request <> HideReq(i) Then
        Else
            AgentControl.Characters.Unload CharID(i)
        End If
    Next
End Sub

Private Sub AgentControl_Command(ByVal UserInput As Object)
    On Error Resume Next

{Commands}
    Const BadConfidence = 10

    If (UserInput.Confidence <= -40) Then
        ' Bad Recognition
        Exit Sub
    ElseIf (UserInput.Alt1Name <> "") And Abs(Abs(UserInput.Alt1Confidence) - Abs(UserInput.Confidence)) < BadConfidence Then
        ' Bad Confidence - too close to another command
        Exit Sub
    ElseIf (UserInput.Alt2Name <> "") And Abs(Abs(UserInput.Alt2Confidence) - Abs(UserInput.Confidence)) < BadConfidence Then
        ' Bad Confidence - too close to another command
        Exit Sub
    Else ' High Confidence
        ' *** BEGIN MASH USER COMMANDS ***
#COMMAND_SCRIPT
        ' *** END MASH USER COMMANDS ***
    End If
{/Commands}
End Sub

Private Sub AgentControl_Bookmark(ByVal BookmarkID As Long)
    On Error Resume Next

{Bookmarks}
    ' *** BEGIN MASH USER BOOKMARKS ***
#BOOKMARK_SCRIPT
    ' *** END MASH USER BOOKMARKS ***
{/Bookmarks}
End Sub

Private Sub AgentIntro()
    On Error Resume Next

{ScreenPos}
    GetScreenPositions
{/ScreenPos}
{Commands}
    InitAgentCommands
{/Commands}

    ' *** BEGIN MASH USER SCRIPT ***

#MAIN_SCRIPT

    ' *** END MASH USER SCRIPT ***
End Sub
'_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
